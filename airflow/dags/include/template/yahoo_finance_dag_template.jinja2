from airflow import DAG
from datetime import timedelta, datetime
# from airflow.providers.snowflake.operators.snowflake import SnowflakeOperator
from airflow.operators.python_operator import PythonOperator
from airflow.operators.python_operator import BranchPythonOperator
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.providers.mysql.hooks.mysql import MySqlHook
from airflow.providers.mysql.operators.mysql import MySqlOperator
import yfinance as yf
import pandas as pd
import include.sql.yahoo_finance as sql_stmts
from airflow.contrib.operators.slack_webhook_operator import SlackWebhookOperator

def notification(context):
    slack_icon = "large_green_circle" if context.get('task_instance').state == "success" else "red_circle"
    task_state = context.get('task_instance').state
    task_id = context.get('task_instance').task_id
    dag_id = context.get('task_instance').dag_id
    task_exec_date = context.get('execution_date')
    task_log_url = context.get('task_instance').log_url

    slack_msg = """
            :{icon}: Task {state}.
            *Dag*: {task} 
            *Task*: {dag}   
            *Execution Time*: {exec_date}  
            *Log Url*: {log_url} 
            """.format(
        icon=slack_icon,
        state=task_state,
        dag=task_id,
        task=dag_id,
        exec_date=task_exec_date,
        log_url=task_log_url)
    html_msg = """
    <html>
      <body>
        <h2>Task Execution Notification</h2>
        <p>
          <strong>Task State:</strong> {state}<br>
          <strong>DAG:</strong> {dag}<br>
          <strong>Task:</strong> {task}<br>
          <strong>Execution Time:</strong> {exec_date}<br>
          <strong>Log URL:</strong> <a href="{log_url}">{log_url}</a><br>
        </p>
      </body>
    </html>
    """.format(
        state=task_state,
        dag=task_id,
        task=dag_id,
        exec_date=task_exec_date,
        log_url=task_log_url
    )
    slack_task = SlackWebhookOperator(
        task_id='slack_notification',
        slack_webhook_conn_id='slack',
        message=slack_msg,
        channel="#snowtrend-notify")
    slack_task.execute(context=context)

def pull_xcom(**kwargs):
    ti = kwargs['ti']
    result = ti.xcom_pull(task_ids = 'Check-Table-Exists-Or-Not', key = 'return_value')
    return True if result[0][0]==1 else False

def decide_branch(**kwargs) :
    ti = kwargs['ti']
    result = ti.xcom_pull(task_ids = 'Pull-Pervious-XCOM', key = 'return_value')
    if result :
        return ['Check-Max-Date']
    else :
        return ['Create-Table','Check-Max-Date']

def extract_data(**kwargs) :
    get_stock_history = yf.Ticker(kwargs['ticker'])
    ti = kwargs['ti']
    result = ti.xcom_pull(task_ids = 'Check-Max-Date', key = 'return_value')
    result = result[0][0]
    if result != None :
        start_date = result + timedelta(days=1)
    else :
        start_date = '1900-01-01'
    end_date = datetime.now()
    print('Start Date ---------->',start_date)
    print('End Date ---------->',end_date)
    stock_df = get_stock_history.history(start=start_date, 
                                    end=end_date)
    if stock_df.size > 0 :
        stock_df.reset_index(inplace = True)
        stock_df['Date'] = pd.to_datetime(stock_df.Date).dt.tz_localize(None)
        if start_date != '1900-01-01' :
            stock_df = stock_df[stock_df['Date'] > result]
        print(stock_df)
        print(stock_df.size)
        stock_df.rename(
            columns={
                'Low' : 'LOW',
                'High' : 'HIGH',
                'Close' : 'CLOSE',
                'Open' : 'OPEN',
                'Date' : 'DATE',
                'Volume' : 'VOLUME',
                'Dividends' : 'DIVIDENDS',
                'Stock Splits' : 'SPLITS'
            },inplace = True
        )
        stock_df['LOAD_DATE'] = datetime.now()
        stock_df = stock_df[['DATE','OPEN','HIGH','LOW','CLOSE','VOLUME','DIVIDENDS','SPLITS','LOAD_DATE']]
        conn_obj = MySqlHook(
            mysql_conn_id  = "snow_trend_db",
            database  = "{{database}}"
        ).get_conn()
        cursor_obj = conn_obj.cursor()
        insert_query = 'INSERT INTO {{database}}.{{table}} VALUE {record}'
        for data in stock_df.itertuples() :
            cursor_obj.execute(insert_query.format(record=data[1:]))
        conn_obj.commit()
        conn_obj.close()

default_args = {
    "owner": "Yash",
    "retries": 0,
    # "retry_delay": timedelta(minutes=5),
    "on_failure_callback": notification,
    "on_success_callback": notification,
    'AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION' : True
}

with DAG(
    "Load-Data-{{dag_id}}",
    start_date=datetime(2024, 1, 1),
    schedule="{{schedule_interval}}",
    catchup={{catchup or False}},
    default_args = default_args,
    render_template_as_native_obj=True
) as dag :

    check_table_exists = MySqlOperator(
            task_id = 'Check-Table-Exists-Or-Not',
            sql=sql_stmts.check_if_exists,
            params = {
                "table" : '{{table}}',
                "database" : '{{database}}'
                        },
            mysql_conn_id = "snow_trend_db"
    )

    pull_xcoms = PythonOperator(
        task_id = 'Pull-Pervious-XCOM',
        python_callable = pull_xcom
    )

    branch_check = BranchPythonOperator(
        task_id = 'Branch-Check',
        python_callable = decide_branch
    )

    create_table = MySqlOperator(
            task_id = 'Create-Table',
            sql=sql_stmts.create_stock_table,
            params = {
                "table" : '{{table}}',
                "database" : '{{database}}'
                        },
            mysql_conn_id = "snow_trend_db"
    )

    load_data = PythonOperator(
        task_id = 'Extract-And-Load-Data',
        python_callable = extract_data,
        op_kwargs = {
                "ticker" : '{{ticker}}'
                        },
        trigger_rule="none_failed"
    )

    check_max_date = MySqlOperator(
        task_id = 'Check-Max-Date',
        sql=sql_stmts.check_max_date,
        params = {
                "table" : '{{table}}',
                "database" : '{{database}}'
                        },
        mysql_conn_id = "snow_trend_db"
    )

check_table_exists >> pull_xcoms >> branch_check
branch_check >> [create_table,check_max_date] >> load_data